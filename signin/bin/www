#!/usr/bin/env node

/**
* Module dependencies.
*/
var debug = require('debug')('signin:server');
var http = require('http');

var Mongo = require('mongodb').MongoClient;
var mongourl = 'mongodb://localhost:27017/signin';
Mongo.connect(mongourl).catch(function(error) {
  debug('Connected to ' + mongourl + ' was failed with error: ', error);
}).then(function (db) {
  var app = require('../app')(db);
  //Get port from environment and store in Express.
  var port = normalizePort(process.env.PORT || '8000');
  app.set('port', port);

  //Create HTTP server
  var server = http.createServer(app);
  //Listen on provided port, on all network interfaces
  //172.18.71.164
  // server.listen(port, '172.18.71.164');
  server.listen(port);
  console.log('Listening on http://127.0.0.1:8000');

  server.on('error', onError);
  server.on('listening', onListening);

  //Normalize a port into a number, string, or false
  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  //Event listener for HTTP server "error" event
  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  //Event listener for HTTP server "listening" event.
  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
});
